"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var find = require("find");
var fileinfo = require("filenameinfo");
var Promise = require("bluebird");
var async = require("async");
var unicoid_1 = require("unicoid");
var getFileSize = require('getfilesize');
var getDuration = require('get-video-duration');
var ffmetadata = require("ffmetadata");
function list(path, config) {
    function createuid(array) {
        var exists = false;
        var uid = unicoid_1.uniqueid(8);
        for (var i = 0; i < array.length; i++) {
            if (array[i].uid === uid) {
                exists = true;
            }
        }
        if (exists) {
            return createuid(array);
        }
        else {
            return uid;
        }
    }
    return new Promise(function (resolve, reject) {
        find.file(path, function (files) {
            var media = [];
            for (var i = 0; i < files.length; i++) {
                if (parseInt(getFileSize(files[i])) && parseInt(getFileSize(files[i])) > 0) {
                    var m = fileinfo.filenameinfo(files[i]);
                    if (m.extensionFamily === 'video' || m.extensionFamily === 'audio') {
                        m.uid = createuid(media);
                        if (config && config.serverUri && config.serverUri.path && config.serverUri.uri && m.path.split(config.serverUri.path).length > 1 && m.path.split(config.serverUri.path)[0] === '') {
                            m.uri = config.serverUri.uri + m.path.split(config.serverUri.path)[1];
                        }
                        console.log('add ' + files[0], getFileSize(files[0]));
                        media.push(m);
                    }
                }
            }
            async.eachSeries(media, function (m, cb) {
                console.log('duration', m);
                getDuration(m.path).then(function (a) {
                    m.duration = a;
                    ffmetadata.read(m.path, function (err, data) {
                        if (err) {
                            cb("Error reading metadata");
                        }
                        else {
                            m.meta = data;
                            cb();
                        }
                        ;
                    });
                }).catch(function (err) {
                    cb(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(media);
                }
            });
        }).error(function (err) {
            if (err) {
                reject(err);
            }
            else {
                reject('find error');
            }
        });
    });
}
exports.list = list;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsS0FBSyxDQUFDLENBQUE7Z0JBQ2hCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQTtRQUlKLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUc7WUFDcEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDUixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDYixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ3RCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUlKLENBQUMsQ0FBQyxDQUFBO0FBSUosQ0FBQztBQS9GRCxvQkErRkMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmaW5kIGZyb20gJ2ZpbmQnXG5pbXBvcnQgKiBhcyBmaWxlaW5mbyBmcm9tICdmaWxlbmFtZWluZm8nXG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xuaW1wb3J0ICogYXMgYXN5bmMgZnJvbSAnYXN5bmMnXG5pbXBvcnQgeyB1bmlxdWVpZCB9IGZyb20gJ3VuaWNvaWQnXG5cbmNvbnN0IGdldEZpbGVTaXplID0gcmVxdWlyZSgnZ2V0ZmlsZXNpemUnKTtcblxuXG5jb25zdCBnZXREdXJhdGlvbiA9IHJlcXVpcmUoJ2dldC12aWRlby1kdXJhdGlvbicpO1xuY29uc3QgZmZtZXRhZGF0YSA9IHJlcXVpcmUoXCJmZm1ldGFkYXRhXCIpO1xuXG5cbmludGVyZmFjZSBJTWVkaWFGaWxlSW5mb0NvbmYge1xuICBmb3JtYXRzPzogc3RyaW5nW11cbiAgZXhjbHVkZT86IHN0cmluZ1tdXG4gIHNlcnZlclVyaT86IHsgcGF0aDogc3RyaW5nLCB1cmk6IHN0cmluZyB9XG59XG5pbnRlcmZhY2UgSU1lZGlhRmlsZVJlc3Age1xuICBtZXRhOiBJTWVkaWFGaWxlTWV0YVxuICBkdXJhdGlvbjogc3RyaW5nXG4gIHBhdGg6IHN0cmluZ1xuICBmdWxsbmFtZTogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBleHRlbnNpb246IHN0cmluZ1xuICBkaXI6IHN0cmluZ1xuICBleHRlbnNpb25GYW1pbHk6IHN0cmluZ1xuICBleHRlbnNpb25UeXBlOiBzdHJpbmdcbiAgdWlkOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIElNZWRpYUZpbGVNZXRhIHtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdChwYXRoOiBzdHJpbmcsIGNvbmZpZz86IElNZWRpYUZpbGVJbmZvQ29uZikge1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZXVpZChhcnJheSkge1xuICAgIGxldCBleGlzdHMgPSBmYWxzZVxuICAgIGNvbnN0IHVpZCA9IHVuaXF1ZWlkKDgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFycmF5W2ldLnVpZCA9PT0gdWlkKSB7XG4gICAgICAgIGV4aXN0cyA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXhpc3RzKSB7XG4gICAgICByZXR1cm4gY3JlYXRldWlkKGFycmF5KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdWlkXG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2U8SU1lZGlhRmlsZVJlc3BbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgZmluZC5maWxlKHBhdGgsIGZ1bmN0aW9uIChmaWxlcykge1xuXG5cbiAgICAgIGNvbnN0IG1lZGlhOiBJTWVkaWFGaWxlUmVzcFtdID0gW11cblxuXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBpZiAocGFyc2VJbnQoZ2V0RmlsZVNpemUoZmlsZXNbaV0pKSAmJiBwYXJzZUludChnZXRGaWxlU2l6ZShmaWxlc1tpXSkpID4gMCkge1xuICAgICAgICAgIGNvbnN0IG06IGFueSA9IGZpbGVpbmZvLmZpbGVuYW1laW5mbyhmaWxlc1tpXSlcbiAgICAgICAgICBpZiAobS5leHRlbnNpb25GYW1pbHkgPT09ICd2aWRlbycgfHwgbS5leHRlbnNpb25GYW1pbHkgPT09ICdhdWRpbycpIHtcblxuXG4gICAgICAgICAgICBtLnVpZCA9IGNyZWF0ZXVpZChtZWRpYSlcblxuICAgICAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcuc2VydmVyVXJpICYmIGNvbmZpZy5zZXJ2ZXJVcmkucGF0aCAmJiBjb25maWcuc2VydmVyVXJpLnVyaSAmJiBtLnBhdGguc3BsaXQoY29uZmlnLnNlcnZlclVyaS5wYXRoKS5sZW5ndGggPiAxICYmIG0ucGF0aC5zcGxpdChjb25maWcuc2VydmVyVXJpLnBhdGgpWzBdID09PSAnJykge1xuICAgICAgICAgICAgICBtLnVyaSA9IGNvbmZpZy5zZXJ2ZXJVcmkudXJpICsgbS5wYXRoLnNwbGl0KGNvbmZpZy5zZXJ2ZXJVcmkucGF0aClbMV1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2FkZCAnICsgZmlsZXNbMF0sIGdldEZpbGVTaXplKGZpbGVzWzBdKSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgIG1lZGlhLnB1c2gobSlcblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cblxuXG4gICAgICB9XG5cblxuXG4gICAgICBhc3luYy5lYWNoU2VyaWVzKG1lZGlhLCAobSwgY2IpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ2R1cmF0aW9uJywgbSlcbiAgICAgICAgZ2V0RHVyYXRpb24obS5wYXRoKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgbS5kdXJhdGlvbiA9IGFcbiAgICAgICAgICBmZm1ldGFkYXRhLnJlYWQobS5wYXRoLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGNiKFwiRXJyb3IgcmVhZGluZyBtZXRhZGF0YVwiKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbS5tZXRhID0gZGF0YVxuICAgICAgICAgICAgICBjYigpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBjYihlcnIpXG4gICAgICAgIH0pXG4gICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWVkaWEpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cblxuXG4gICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KCdmaW5kIGVycm9yJylcbiAgICAgIH1cbiAgICB9KVxuXG5cblxuICB9KVxuXG5cblxufVxuXG5cbiJdfQ==
