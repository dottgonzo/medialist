"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var find = require("find");
var fileinfo = require("filenameinfo");
var Promise = require("bluebird");
var async = require("async");
var unicoid_1 = require("unicoid");
var getDuration = require('get-video-duration');
var ffmetadata = require("ffmetadata");
function list(path, config) {
    function createuid(array) {
        var exists = false;
        var uid = unicoid_1.uniqueid(8);
        for (var i = 0; i < array.length; i++) {
            if (array[i].uid === uid) {
                exists = true;
            }
        }
        if (exists) {
            return createuid(array);
        }
        else {
            return uid;
        }
    }
    return new Promise(function (resolve, reject) {
        find.file(path, function (files) {
            var media = [];
            for (var i = 0; i < files.length; i++) {
                var m = fileinfo.filenameinfo(files[i]);
                if (m.extensionFamily === 'video' || m.extensionFamily === 'audio') {
                    m.uid = createuid(media);
                    if (config && config.serverUri && config.serverUri.path && config.serverUri.uri && m.path.split(config.serverUri.path).length > 1 && m.path.split(config.serverUri.path)[0] === '') {
                        m.uri = config.serverUri.uri + m.path.split(config.serverUri.path)[1];
                    }
                    media.push(m);
                }
            }
            async.eachSeries(media, function (m, cb) {
                getDuration(m.path).then(function (a) {
                    m.duration = a;
                    ffmetadata.read(m.path, function (err, data) {
                        if (err) {
                            cb("Error reading metadata");
                        }
                        else {
                            m.meta = data;
                            cb();
                        }
                        ;
                    });
                }).catch(function (err) {
                    cb(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(media);
                }
            });
        }).error(function (err) {
            if (err) {
                reject(err);
            }
            else {
                reject('find error');
            }
        });
    });
}
exports.list = list;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxRQUFRLEdBQUcsQ0FBQyxDQUFBO29CQUNkLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxVQUFVLEdBQUcsRUFBRSxJQUFJO3dCQUN6QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUNSLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO3dCQUM5QixDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNOLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBOzRCQUNiLEVBQUUsRUFBRSxDQUFBO3dCQUNOLENBQUM7d0JBQUEsQ0FBQztvQkFDSixDQUFDLENBQUMsQ0FBQztnQkFFTCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO29CQUNYLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDVCxDQUFDLENBQUMsQ0FBQTtZQUNKLENBQUMsRUFBRSxVQUFDLEdBQUc7Z0JBQ0wsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDUixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQ2IsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7Z0JBQ2hCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQTtRQUlKLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFTLEdBQUc7WUFDbkIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDUixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDYixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ3RCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUlOLENBQUMsQ0FBQyxDQUFBO0FBSUosQ0FBQztBQXZGRCxvQkF1RkMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmaW5kIGZyb20gJ2ZpbmQnXG5pbXBvcnQgKiBhcyBmaWxlaW5mbyBmcm9tICdmaWxlbmFtZWluZm8nXG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xuaW1wb3J0ICogYXMgYXN5bmMgZnJvbSAnYXN5bmMnXG5pbXBvcnQgeyB1bmlxdWVpZCB9IGZyb20gJ3VuaWNvaWQnXG5cbmNvbnN0IGdldER1cmF0aW9uID0gcmVxdWlyZSgnZ2V0LXZpZGVvLWR1cmF0aW9uJyk7XG5jb25zdCBmZm1ldGFkYXRhID0gcmVxdWlyZShcImZmbWV0YWRhdGFcIik7XG5cblxuaW50ZXJmYWNlIElNZWRpYUZpbGVJbmZvQ29uZiB7XG4gIGZvcm1hdHM/OiBzdHJpbmdbXVxuICBleGNsdWRlPzogc3RyaW5nW11cbiAgc2VydmVyVXJpPzogeyBwYXRoOiBzdHJpbmcsIHVyaTogc3RyaW5nIH1cbn1cbmludGVyZmFjZSBJTWVkaWFGaWxlUmVzcCB7XG4gIG1ldGE6IElNZWRpYUZpbGVNZXRhXG4gIGR1cmF0aW9uOiBzdHJpbmdcbiAgcGF0aDogc3RyaW5nXG4gIGZ1bGxuYW1lOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIGV4dGVuc2lvbjogc3RyaW5nXG4gIGRpcjogc3RyaW5nXG4gIGV4dGVuc2lvbkZhbWlseTogc3RyaW5nXG4gIGV4dGVuc2lvblR5cGU6IHN0cmluZ1xuICB1aWQ6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgSU1lZGlhRmlsZU1ldGEge1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0KHBhdGg6IHN0cmluZywgY29uZmlnPzogSU1lZGlhRmlsZUluZm9Db25mKSB7XG5cbiAgZnVuY3Rpb24gY3JlYXRldWlkKGFycmF5KSB7XG4gICAgbGV0IGV4aXN0cyA9IGZhbHNlXG4gICAgY29uc3QgdWlkID0gdW5pcXVlaWQoOClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlbaV0udWlkID09PSB1aWQpIHtcbiAgICAgICAgZXhpc3RzID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleGlzdHMpIHtcbiAgICAgIHJldHVybiBjcmVhdGV1aWQoYXJyYXkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1aWRcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZTxJTWVkaWFGaWxlUmVzcFtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICBmaW5kLmZpbGUocGF0aCwgZnVuY3Rpb24gKGZpbGVzKSB7XG5cblxuICAgICAgICBjb25zdCBtZWRpYTogSU1lZGlhRmlsZVJlc3BbXSA9IFtdXG5cblxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBtOiBhbnkgPSBmaWxlaW5mby5maWxlbmFtZWluZm8oZmlsZXNbaV0pXG4gICAgICAgICAgaWYgKG0uZXh0ZW5zaW9uRmFtaWx5ID09PSAndmlkZW8nIHx8IG0uZXh0ZW5zaW9uRmFtaWx5ID09PSAnYXVkaW8nKSB7XG5cblxuICAgICAgICAgICAgbS51aWQgPSBjcmVhdGV1aWQobWVkaWEpXG5cbiAgICAgICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLnNlcnZlclVyaSAmJiBjb25maWcuc2VydmVyVXJpLnBhdGggJiYgY29uZmlnLnNlcnZlclVyaS51cmkgJiYgbS5wYXRoLnNwbGl0KGNvbmZpZy5zZXJ2ZXJVcmkucGF0aCkubGVuZ3RoID4gMSAmJiBtLnBhdGguc3BsaXQoY29uZmlnLnNlcnZlclVyaS5wYXRoKVswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgbS51cmkgPSBjb25maWcuc2VydmVyVXJpLnVyaSArIG0ucGF0aC5zcGxpdChjb25maWcuc2VydmVyVXJpLnBhdGgpWzFdXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgbWVkaWEucHVzaChtKVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhtZWRpYSwgKG0sIGNiKSA9PiB7XG4gICAgICAgICAgZ2V0RHVyYXRpb24obS5wYXRoKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICBtLmR1cmF0aW9uID0gYVxuICAgICAgICAgICAgZmZtZXRhZGF0YS5yZWFkKG0ucGF0aCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2IoXCJFcnJvciByZWFkaW5nIG1ldGFkYXRhXCIpXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbS5tZXRhID0gZGF0YVxuICAgICAgICAgICAgICAgIGNiKClcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY2IoZXJyKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKG1lZGlhKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuXG5cbiAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2ZpbmQgZXJyb3InKVxuICAgICAgICB9XG4gICAgICB9KVxuXG5cblxuICB9KVxuXG5cblxufVxuXG5cbiJdfQ==
