"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var find = require("find");
var fileinfo = require("filenameinfo");
var Promise = require("bluebird");
var async = require("async");
var unicoid_1 = require("unicoid");
var getDuration = require('get-video-duration');
var ffmetadata = require("ffmetadata");
function list(path, config) {
    function createuid(array) {
        var exists = false;
        var uid = unicoid_1.uniqueid(8);
        for (var i = 0; i < array.length; i++) {
            if (array[i].uid === uid) {
                exists = true;
            }
        }
        if (exists) {
            return createuid(array);
        }
        else {
            return uid;
        }
    }
    return new Promise(function (resolve, reject) {
        find.file(path, function (files) {
            var media = [];
            for (var i = 0; i < files.length; i++) {
                var m = fileinfo.filenameinfo(files[i]);
                if (m.extensionFamily === 'video' || m.extensionFamily === 'audio') {
                    m.uid = createuid(media);
                    media.push(m);
                }
            }
            async.eachSeries(media, function (m, cb) {
                getDuration(m.path).then(function (a) {
                    m.duration = a;
                    ffmetadata.read(m.path, function (err, data) {
                        if (err) {
                            cb("Error reading metadata");
                        }
                        else {
                            m.meta = data;
                            cb();
                        }
                        ;
                    });
                }).catch(function (err) {
                    cb(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(media);
                }
            });
        });
    });
}
exports.list = list;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQyxDQUFDO29CQUNSLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDYixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDaEIsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFBO1FBSUosQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUlKLENBQUM7QUF4RUQsb0JBd0VDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZmluZCBmcm9tICdmaW5kJ1xuaW1wb3J0ICogYXMgZmlsZWluZm8gZnJvbSAnZmlsZW5hbWVpbmZvJ1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcbmltcG9ydCAqIGFzIGFzeW5jIGZyb20gJ2FzeW5jJ1xuaW1wb3J0IHsgdW5pcXVlaWQgfSBmcm9tICd1bmljb2lkJ1xuXG5jb25zdCBnZXREdXJhdGlvbiA9IHJlcXVpcmUoJ2dldC12aWRlby1kdXJhdGlvbicpO1xuY29uc3QgZmZtZXRhZGF0YSA9IHJlcXVpcmUoXCJmZm1ldGFkYXRhXCIpO1xuXG5cbmludGVyZmFjZSBJTWVkaWFGaWxlSW5mb0NvbmYge1xuICBmb3JtYXRzPzogc3RyaW5nW11cbiAgZXhjbHVkZT86IHN0cmluZ1tdXG59XG5pbnRlcmZhY2UgSU1lZGlhRmlsZVJlc3Age1xuICBtZXRhOiBJTWVkaWFGaWxlTWV0YVxuICBkdXJhdGlvbjogc3RyaW5nXG4gIHBhdGg6IHN0cmluZ1xuICBmdWxsbmFtZTogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBleHRlbnNpb246IHN0cmluZ1xuICBkaXI6IHN0cmluZ1xuICBleHRlbnNpb25GYW1pbHk6IHN0cmluZ1xuICBleHRlbnNpb25UeXBlOiBzdHJpbmdcbiAgdWlkOiBzdHJpbmdcbn1cbmludGVyZmFjZSBJTWVkaWFGaWxlTWV0YSB7XG5cbn1cbmV4cG9ydCBmdW5jdGlvbiBsaXN0KHBhdGg6IHN0cmluZywgY29uZmlnPzogSU1lZGlhRmlsZUluZm9Db25mKSB7XG5cbiAgZnVuY3Rpb24gY3JlYXRldWlkKGFycmF5KSB7XG4gICAgbGV0IGV4aXN0cyA9IGZhbHNlXG4gICAgY29uc3QgdWlkID0gdW5pcXVlaWQoOClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlbaV0udWlkID09PSB1aWQpIHtcbiAgICAgICAgZXhpc3RzID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleGlzdHMpIHtcbiAgICAgIHJldHVybiBjcmVhdGV1aWQoYXJyYXkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1aWRcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZTxJTWVkaWFGaWxlUmVzcFtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZmluZC5maWxlKHBhdGgsIGZ1bmN0aW9uIChmaWxlcykge1xuXG5cbiAgICAgIGNvbnN0IG1lZGlhOiBJTWVkaWFGaWxlUmVzcFtdID0gW11cblxuXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbTogYW55ID0gZmlsZWluZm8uZmlsZW5hbWVpbmZvKGZpbGVzW2ldKVxuICAgICAgICBpZiAobS5leHRlbnNpb25GYW1pbHkgPT09ICd2aWRlbycgfHwgbS5leHRlbnNpb25GYW1pbHkgPT09ICdhdWRpbycpIHtcblxuXG4gICAgICAgICAgbS51aWQgPSBjcmVhdGV1aWQobWVkaWEpXG5cbiAgICAgICAgICBtZWRpYS5wdXNoKG0pXG5cbiAgICAgICAgfVxuXG4gICAgICB9XG5cblxuXG4gICAgICBhc3luYy5lYWNoU2VyaWVzKG1lZGlhLCAobSwgY2IpID0+IHtcbiAgICAgICAgZ2V0RHVyYXRpb24obS5wYXRoKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgbS5kdXJhdGlvbiA9IGFcbiAgICAgICAgICBmZm1ldGFkYXRhLnJlYWQobS5wYXRoLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGNiKFwiRXJyb3IgcmVhZGluZyBtZXRhZGF0YVwiKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbS5tZXRhID0gZGF0YVxuICAgICAgICAgICAgICBjYigpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBjYihlcnIpXG4gICAgICAgIH0pXG4gICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWVkaWEpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cblxuXG4gICAgfSlcbiAgfSlcblxuXG5cbn1cblxuXG4iXX0=
