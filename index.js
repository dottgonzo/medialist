"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var find = require("find");
var fileinfo = require("filenameinfo");
var Promise = require("bluebird");
var async = require("async");
var unicoid_1 = require("unicoid");
var getDuration = require('get-video-duration');
var ffmetadata = require("ffmetadata");
function list(path, config) {
    function createuid(array) {
        var exists = false;
        var uid = unicoid_1.uniqueid(8);
        for (var i = 0; i < array.length; i++) {
            if (array[i].uid === uid) {
                exists = true;
            }
        }
        if (exists) {
            return createuid(array);
        }
        else {
            return uid;
        }
    }
    return new Promise(function (resolve, reject) {
        try {
            find.file(path, function (files) {
                var media = [];
                for (var i = 0; i < files.length; i++) {
                    var m = fileinfo.filenameinfo(files[i]);
                    if (m.extensionFamily === 'video' || m.extensionFamily === 'audio') {
                        m.uid = createuid(media);
                        if (config && config.serverUri && config.serverUri.path && config.serverUri.uri && m.path.split(config.serverUri.path).length > 1 && m.path.split(config.serverUri.path)[0] === '') {
                            m.uri = config.serverUri.uri + m.path.split(config.serverUri.path)[1];
                        }
                        media.push(m);
                    }
                }
                async.eachSeries(media, function (m, cb) {
                    getDuration(m.path).then(function (a) {
                        m.duration = a;
                        ffmetadata.read(m.path, function (err, data) {
                            if (err) {
                                cb("Error reading metadata");
                            }
                            else {
                                m.meta = data;
                                cb();
                            }
                            ;
                        });
                    }).catch(function (err) {
                        cb(err);
                    });
                }, function (err) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(media);
                    }
                });
            });
        }
        catch (err) {
            reject(err);
        }
    });
}
exports.list = list;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDO3dCQUN6QixDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQTt3QkFDZCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxHQUFHLEVBQUUsSUFBSTs0QkFDekMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQ0FDUixFQUFFLENBQUMsd0JBQXdCLENBQUMsQ0FBQTs0QkFDOUIsQ0FBQzs0QkFBQyxJQUFJLENBQUMsQ0FBQztnQ0FDTixDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtnQ0FDYixFQUFFLEVBQUUsQ0FBQTs0QkFDTixDQUFDOzRCQUFBLENBQUM7d0JBQ0osQ0FBQyxDQUFDLENBQUM7b0JBRUwsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRzt3QkFDWCxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUE7b0JBQ1QsQ0FBQyxDQUFDLENBQUE7Z0JBQ0osQ0FBQyxFQUFFLFVBQUMsR0FBRztvQkFDTCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNSLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtvQkFDYixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQkFDaEIsQ0FBQztnQkFDSCxDQUFDLENBQUMsQ0FBQTtZQUlKLENBQUMsQ0FBQyxDQUFBO1FBRUosQ0FBQztRQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFYixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFYixDQUFDO0lBRUgsQ0FBQyxDQUFDLENBQUE7QUFJSixDQUFDO0FBckZELG9CQXFGQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZpbmQgZnJvbSAnZmluZCdcbmltcG9ydCAqIGFzIGZpbGVpbmZvIGZyb20gJ2ZpbGVuYW1laW5mbydcbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgKiBhcyBhc3luYyBmcm9tICdhc3luYydcbmltcG9ydCB7IHVuaXF1ZWlkIH0gZnJvbSAndW5pY29pZCdcblxuY29uc3QgZ2V0RHVyYXRpb24gPSByZXF1aXJlKCdnZXQtdmlkZW8tZHVyYXRpb24nKTtcbmNvbnN0IGZmbWV0YWRhdGEgPSByZXF1aXJlKFwiZmZtZXRhZGF0YVwiKTtcblxuXG5pbnRlcmZhY2UgSU1lZGlhRmlsZUluZm9Db25mIHtcbiAgZm9ybWF0cz86IHN0cmluZ1tdXG4gIGV4Y2x1ZGU/OiBzdHJpbmdbXVxuICBzZXJ2ZXJVcmk/OiB7IHBhdGg6IHN0cmluZywgdXJpOiBzdHJpbmcgfVxufVxuaW50ZXJmYWNlIElNZWRpYUZpbGVSZXNwIHtcbiAgbWV0YTogSU1lZGlhRmlsZU1ldGFcbiAgZHVyYXRpb246IHN0cmluZ1xuICBwYXRoOiBzdHJpbmdcbiAgZnVsbG5hbWU6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgZXh0ZW5zaW9uOiBzdHJpbmdcbiAgZGlyOiBzdHJpbmdcbiAgZXh0ZW5zaW9uRmFtaWx5OiBzdHJpbmdcbiAgZXh0ZW5zaW9uVHlwZTogc3RyaW5nXG4gIHVpZDogc3RyaW5nXG59XG5cbmludGVyZmFjZSBJTWVkaWFGaWxlTWV0YSB7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3QocGF0aDogc3RyaW5nLCBjb25maWc/OiBJTWVkaWFGaWxlSW5mb0NvbmYpIHtcblxuICBmdW5jdGlvbiBjcmVhdGV1aWQoYXJyYXkpIHtcbiAgICBsZXQgZXhpc3RzID0gZmFsc2VcbiAgICBjb25zdCB1aWQgPSB1bmlxdWVpZCg4KVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhcnJheVtpXS51aWQgPT09IHVpZCkge1xuICAgICAgICBleGlzdHMgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4aXN0cykge1xuICAgICAgcmV0dXJuIGNyZWF0ZXVpZChhcnJheSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVpZFxuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlPElNZWRpYUZpbGVSZXNwW10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgZmluZC5maWxlKHBhdGgsIGZ1bmN0aW9uIChmaWxlcykge1xuXG5cbiAgICAgICAgY29uc3QgbWVkaWE6IElNZWRpYUZpbGVSZXNwW10gPSBbXVxuXG5cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgbTogYW55ID0gZmlsZWluZm8uZmlsZW5hbWVpbmZvKGZpbGVzW2ldKVxuICAgICAgICAgIGlmIChtLmV4dGVuc2lvbkZhbWlseSA9PT0gJ3ZpZGVvJyB8fCBtLmV4dGVuc2lvbkZhbWlseSA9PT0gJ2F1ZGlvJykge1xuXG5cbiAgICAgICAgICAgIG0udWlkID0gY3JlYXRldWlkKG1lZGlhKVxuXG4gICAgICAgICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5zZXJ2ZXJVcmkgJiYgY29uZmlnLnNlcnZlclVyaS5wYXRoICYmIGNvbmZpZy5zZXJ2ZXJVcmkudXJpICYmIG0ucGF0aC5zcGxpdChjb25maWcuc2VydmVyVXJpLnBhdGgpLmxlbmd0aCA+IDEgJiYgbS5wYXRoLnNwbGl0KGNvbmZpZy5zZXJ2ZXJVcmkucGF0aClbMF0gPT09ICcnKSB7XG4gICAgICAgICAgICAgIG0udXJpID0gY29uZmlnLnNlcnZlclVyaS51cmkgKyBtLnBhdGguc3BsaXQoY29uZmlnLnNlcnZlclVyaS5wYXRoKVsxXVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIG1lZGlhLnB1c2gobSlcblxuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cblxuXG4gICAgICAgIGFzeW5jLmVhY2hTZXJpZXMobWVkaWEsIChtLCBjYikgPT4ge1xuICAgICAgICAgIGdldER1cmF0aW9uKG0ucGF0aCkudGhlbigoYSkgPT4ge1xuICAgICAgICAgICAgbS5kdXJhdGlvbiA9IGFcbiAgICAgICAgICAgIGZmbWV0YWRhdGEucmVhZChtLnBhdGgsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNiKFwiRXJyb3IgcmVhZGluZyBtZXRhZGF0YVwiKVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG0ubWV0YSA9IGRhdGFcbiAgICAgICAgICAgICAgICBjYigpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNiKGVycilcbiAgICAgICAgICB9KVxuICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShtZWRpYSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cblxuXG4gICAgICB9KVxuXG4gICAgfSBjYXRjaCAoZXJyKSB7XG5cbiAgICAgIHJlamVjdChlcnIpXG5cbiAgICB9XG5cbiAgfSlcblxuXG5cbn1cblxuXG4iXX0=
