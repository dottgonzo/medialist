"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var find = require("find");
var fileinfo = require("filenameinfo");
var Promise = require("bluebird");
var async = require("async");
var unicoid_1 = require("unicoid");
var getFileSize = require('getfilesize');
var getDuration = require('get-video-duration');
var ffmetadata = require("ffmetadata");
function list(path, config) {
    function createuid(array) {
        var exists = false;
        var uid = unicoid_1.uniqueid(8);
        for (var i = 0; i < array.length; i++) {
            if (array[i].uid === uid) {
                exists = true;
            }
        }
        if (exists) {
            return createuid(array);
        }
        else {
            return uid;
        }
    }
    return new Promise(function (resolve, reject) {
        find.file(path, function (files) {
            var media = [];
            for (var i = 0; i < files.length; i++) {
                if (parseInt(getFileSize(files[0])) && parseInt(getFileSize(files[0])) > 0) {
                    console.log('check ' + files[0], getFileSize(files[0]));
                    var m = fileinfo.filenameinfo(files[i]);
                    if (m.extensionFamily === 'video' || m.extensionFamily === 'audio') {
                        m.uid = createuid(media);
                        if (config && config.serverUri && config.serverUri.path && config.serverUri.uri && m.path.split(config.serverUri.path).length > 1 && m.path.split(config.serverUri.path)[0] === '') {
                            m.uri = config.serverUri.uri + m.path.split(config.serverUri.path)[1];
                        }
                        media.push(m);
                    }
                }
            }
            async.eachSeries(media, function (m, cb) {
                console.log('duration', m);
                getDuration(m.path).then(function (a) {
                    m.duration = a;
                    ffmetadata.read(m.path, function (err, data) {
                        if (err) {
                            cb("Error reading metadata");
                        }
                        else {
                            m.meta = data;
                            cb();
                        }
                        ;
                    });
                }).catch(function (err) {
                    cb(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(media);
                }
            });
        }).error(function (err) {
            if (err) {
                reject(err);
            }
            else {
                reject('find error');
            }
        });
    });
}
exports.list = list;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxLQUFLLENBQUMsQ0FBQTtnQkFDaEIsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFBO1FBSUosQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRztZQUNwQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNiLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDdEIsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFBO0lBSUosQ0FBQyxDQUFDLENBQUE7QUFJSixDQUFDO0FBL0ZELG9CQStGQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZpbmQgZnJvbSAnZmluZCdcbmltcG9ydCAqIGFzIGZpbGVpbmZvIGZyb20gJ2ZpbGVuYW1laW5mbydcbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgKiBhcyBhc3luYyBmcm9tICdhc3luYydcbmltcG9ydCB7IHVuaXF1ZWlkIH0gZnJvbSAndW5pY29pZCdcblxuY29uc3QgZ2V0RmlsZVNpemUgPSByZXF1aXJlKCdnZXRmaWxlc2l6ZScpO1xuXG5cbmNvbnN0IGdldER1cmF0aW9uID0gcmVxdWlyZSgnZ2V0LXZpZGVvLWR1cmF0aW9uJyk7XG5jb25zdCBmZm1ldGFkYXRhID0gcmVxdWlyZShcImZmbWV0YWRhdGFcIik7XG5cblxuaW50ZXJmYWNlIElNZWRpYUZpbGVJbmZvQ29uZiB7XG4gIGZvcm1hdHM/OiBzdHJpbmdbXVxuICBleGNsdWRlPzogc3RyaW5nW11cbiAgc2VydmVyVXJpPzogeyBwYXRoOiBzdHJpbmcsIHVyaTogc3RyaW5nIH1cbn1cbmludGVyZmFjZSBJTWVkaWFGaWxlUmVzcCB7XG4gIG1ldGE6IElNZWRpYUZpbGVNZXRhXG4gIGR1cmF0aW9uOiBzdHJpbmdcbiAgcGF0aDogc3RyaW5nXG4gIGZ1bGxuYW1lOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIGV4dGVuc2lvbjogc3RyaW5nXG4gIGRpcjogc3RyaW5nXG4gIGV4dGVuc2lvbkZhbWlseTogc3RyaW5nXG4gIGV4dGVuc2lvblR5cGU6IHN0cmluZ1xuICB1aWQ6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgSU1lZGlhRmlsZU1ldGEge1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0KHBhdGg6IHN0cmluZywgY29uZmlnPzogSU1lZGlhRmlsZUluZm9Db25mKSB7XG5cbiAgZnVuY3Rpb24gY3JlYXRldWlkKGFycmF5KSB7XG4gICAgbGV0IGV4aXN0cyA9IGZhbHNlXG4gICAgY29uc3QgdWlkID0gdW5pcXVlaWQoOClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlbaV0udWlkID09PSB1aWQpIHtcbiAgICAgICAgZXhpc3RzID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleGlzdHMpIHtcbiAgICAgIHJldHVybiBjcmVhdGV1aWQoYXJyYXkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1aWRcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZTxJTWVkaWFGaWxlUmVzcFtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICBmaW5kLmZpbGUocGF0aCwgZnVuY3Rpb24gKGZpbGVzKSB7XG5cblxuICAgICAgY29uc3QgbWVkaWE6IElNZWRpYUZpbGVSZXNwW10gPSBbXVxuXG5cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIGlmIChwYXJzZUludChnZXRGaWxlU2l6ZShmaWxlc1swXSkpICYmIHBhcnNlSW50KGdldEZpbGVTaXplKGZpbGVzWzBdKSkgPiAwKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NoZWNrICcgKyBmaWxlc1swXSwgZ2V0RmlsZVNpemUoZmlsZXNbMF0pKVxuICAgICAgICAgIGNvbnN0IG06IGFueSA9IGZpbGVpbmZvLmZpbGVuYW1laW5mbyhmaWxlc1tpXSlcbiAgICAgICAgICBpZiAobS5leHRlbnNpb25GYW1pbHkgPT09ICd2aWRlbycgfHwgbS5leHRlbnNpb25GYW1pbHkgPT09ICdhdWRpbycpIHtcblxuXG4gICAgICAgICAgICBtLnVpZCA9IGNyZWF0ZXVpZChtZWRpYSlcblxuICAgICAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcuc2VydmVyVXJpICYmIGNvbmZpZy5zZXJ2ZXJVcmkucGF0aCAmJiBjb25maWcuc2VydmVyVXJpLnVyaSAmJiBtLnBhdGguc3BsaXQoY29uZmlnLnNlcnZlclVyaS5wYXRoKS5sZW5ndGggPiAxICYmIG0ucGF0aC5zcGxpdChjb25maWcuc2VydmVyVXJpLnBhdGgpWzBdID09PSAnJykge1xuICAgICAgICAgICAgICBtLnVyaSA9IGNvbmZpZy5zZXJ2ZXJVcmkudXJpICsgbS5wYXRoLnNwbGl0KGNvbmZpZy5zZXJ2ZXJVcmkucGF0aClbMV1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBtZWRpYS5wdXNoKG0pXG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG5cblxuICAgICAgfVxuXG5cblxuICAgICAgYXN5bmMuZWFjaFNlcmllcyhtZWRpYSwgKG0sIGNiKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkdXJhdGlvbicsIG0pXG4gICAgICAgIGdldER1cmF0aW9uKG0ucGF0aCkudGhlbigoYSkgPT4ge1xuICAgICAgICAgIG0uZHVyYXRpb24gPSBhXG4gICAgICAgICAgZmZtZXRhZGF0YS5yZWFkKG0ucGF0aCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBjYihcIkVycm9yIHJlYWRpbmcgbWV0YWRhdGFcIilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG0ubWV0YSA9IGRhdGFcbiAgICAgICAgICAgICAgY2IoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgY2IoZXJyKVxuICAgICAgICB9KVxuICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKG1lZGlhKVxuICAgICAgICB9XG4gICAgICB9KVxuXG5cblxuICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnZmluZCBlcnJvcicpXG4gICAgICB9XG4gICAgfSlcblxuXG5cbiAgfSlcblxuXG5cbn1cblxuXG4iXX0=
