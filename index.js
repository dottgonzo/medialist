"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var find = require("find");
var fileinfo = require("filenameinfo");
var Promise = require("bluebird");
var async = require("async");
var unicoid_1 = require("unicoid");
var getDuration = require('get-video-duration');
var ffmetadata = require("ffmetadata");
function list(path, config) {
    function createuid(array) {
        var exists = false;
        var uid = unicoid_1.uniqueid(8);
        for (var i = 0; i < array.length; i++) {
            if (array[i].uid === uid) {
                exists = true;
            }
        }
        if (exists) {
            return createuid(array);
        }
        else {
            return uid;
        }
    }
    return new Promise(function (resolve, reject) {
        find.file(path, function (files) {
            var media = [];
            for (var i = 0; i < files.length; i++) {
                var m = fileinfo.filenameinfo(files[i]);
                if (m.extensionFamily === 'video' || m.extensionFamily === 'audio') {
                    m.uid = createuid(media);
                    if (config && config.serverUri && config.serverUri.path && config.serverUri.uri && m.path.split(config.serverUri.path).length > 1 && m.path.split(config.serverUri.path)[0] === '') {
                        m.uri = config.serverUri.uri + m.path.split(config.serverUri.path)[1];
                    }
                    media.push(m);
                }
            }
            async.eachSeries(media, function (m, cb) {
                getDuration(m.path).then(function (a) {
                    m.duration = a;
                    ffmetadata.read(m.path, function (err, data) {
                        if (err) {
                            cb("Error reading metadata");
                        }
                        else {
                            m.meta = data;
                            cb();
                        }
                        ;
                    });
                }).catch(function (err) {
                    cb(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(media);
                }
            });
        });
    });
}
exports.list = list;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxRQUFRLEdBQUcsQ0FBQyxDQUFBO29CQUNkLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxVQUFVLEdBQUcsRUFBRSxJQUFJO3dCQUN6QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUNSLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO3dCQUM5QixDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNOLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBOzRCQUNiLEVBQUUsRUFBRSxDQUFBO3dCQUNOLENBQUM7d0JBQUEsQ0FBQztvQkFDSixDQUFDLENBQUMsQ0FBQztnQkFFTCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO29CQUNYLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDVCxDQUFDLENBQUMsQ0FBQTtZQUNKLENBQUMsRUFBRSxVQUFDLEdBQUc7Z0JBQ0wsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDUixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQ2IsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7Z0JBQ2hCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQTtRQUlKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFJSixDQUFDO0FBN0VELG9CQTZFQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZpbmQgZnJvbSAnZmluZCdcbmltcG9ydCAqIGFzIGZpbGVpbmZvIGZyb20gJ2ZpbGVuYW1laW5mbydcbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgKiBhcyBhc3luYyBmcm9tICdhc3luYydcbmltcG9ydCB7IHVuaXF1ZWlkIH0gZnJvbSAndW5pY29pZCdcblxuY29uc3QgZ2V0RHVyYXRpb24gPSByZXF1aXJlKCdnZXQtdmlkZW8tZHVyYXRpb24nKTtcbmNvbnN0IGZmbWV0YWRhdGEgPSByZXF1aXJlKFwiZmZtZXRhZGF0YVwiKTtcblxuXG5pbnRlcmZhY2UgSU1lZGlhRmlsZUluZm9Db25mIHtcbiAgZm9ybWF0cz86IHN0cmluZ1tdXG4gIGV4Y2x1ZGU/OiBzdHJpbmdbXVxuICBzZXJ2ZXJVcmk/OiB7IHBhdGg6IHN0cmluZywgdXJpOiBzdHJpbmcgfVxufVxuaW50ZXJmYWNlIElNZWRpYUZpbGVSZXNwIHtcbiAgbWV0YTogSU1lZGlhRmlsZU1ldGFcbiAgZHVyYXRpb246IHN0cmluZ1xuICBwYXRoOiBzdHJpbmdcbiAgZnVsbG5hbWU6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgZXh0ZW5zaW9uOiBzdHJpbmdcbiAgZGlyOiBzdHJpbmdcbiAgZXh0ZW5zaW9uRmFtaWx5OiBzdHJpbmdcbiAgZXh0ZW5zaW9uVHlwZTogc3RyaW5nXG4gIHVpZDogc3RyaW5nXG59XG5cbmludGVyZmFjZSBJTWVkaWFGaWxlTWV0YSB7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3QocGF0aDogc3RyaW5nLCBjb25maWc/OiBJTWVkaWFGaWxlSW5mb0NvbmYpIHtcblxuICBmdW5jdGlvbiBjcmVhdGV1aWQoYXJyYXkpIHtcbiAgICBsZXQgZXhpc3RzID0gZmFsc2VcbiAgICBjb25zdCB1aWQgPSB1bmlxdWVpZCg4KVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhcnJheVtpXS51aWQgPT09IHVpZCkge1xuICAgICAgICBleGlzdHMgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4aXN0cykge1xuICAgICAgcmV0dXJuIGNyZWF0ZXVpZChhcnJheSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVpZFxuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlPElNZWRpYUZpbGVSZXNwW10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmaW5kLmZpbGUocGF0aCwgZnVuY3Rpb24gKGZpbGVzKSB7XG5cblxuICAgICAgY29uc3QgbWVkaWE6IElNZWRpYUZpbGVSZXNwW10gPSBbXVxuXG5cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBtOiBhbnkgPSBmaWxlaW5mby5maWxlbmFtZWluZm8oZmlsZXNbaV0pXG4gICAgICAgIGlmIChtLmV4dGVuc2lvbkZhbWlseSA9PT0gJ3ZpZGVvJyB8fCBtLmV4dGVuc2lvbkZhbWlseSA9PT0gJ2F1ZGlvJykge1xuXG5cbiAgICAgICAgICBtLnVpZCA9IGNyZWF0ZXVpZChtZWRpYSlcblxuICAgICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLnNlcnZlclVyaSAmJiBjb25maWcuc2VydmVyVXJpLnBhdGggJiYgY29uZmlnLnNlcnZlclVyaS51cmkgJiYgbS5wYXRoLnNwbGl0KGNvbmZpZy5zZXJ2ZXJVcmkucGF0aCkubGVuZ3RoID4gMSAmJiBtLnBhdGguc3BsaXQoY29uZmlnLnNlcnZlclVyaS5wYXRoKVswXSA9PT0gJycpIHtcbiAgICAgICAgICAgIG0udXJpID0gY29uZmlnLnNlcnZlclVyaS51cmkgKyBtLnBhdGguc3BsaXQoY29uZmlnLnNlcnZlclVyaS5wYXRoKVsxXVxuICAgICAgICAgIH1cblxuXG4gICAgICAgICAgbWVkaWEucHVzaChtKVxuXG4gICAgICAgIH1cblxuICAgICAgfVxuXG5cblxuICAgICAgYXN5bmMuZWFjaFNlcmllcyhtZWRpYSwgKG0sIGNiKSA9PiB7XG4gICAgICAgIGdldER1cmF0aW9uKG0ucGF0aCkudGhlbigoYSkgPT4ge1xuICAgICAgICAgIG0uZHVyYXRpb24gPSBhXG4gICAgICAgICAgZmZtZXRhZGF0YS5yZWFkKG0ucGF0aCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBjYihcIkVycm9yIHJlYWRpbmcgbWV0YWRhdGFcIilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG0ubWV0YSA9IGRhdGFcbiAgICAgICAgICAgICAgY2IoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgY2IoZXJyKVxuICAgICAgICB9KVxuICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKG1lZGlhKVxuICAgICAgICB9XG4gICAgICB9KVxuXG5cblxuICAgIH0pXG4gIH0pXG5cblxuXG59XG5cblxuIl19
